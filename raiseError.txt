1. BaseException (The root of all exceptions)
Exception: Base class for most built-in exceptions. This is generally not raised directly but inherited by other exceptions.
2. Arithmetic Errors
ArithmeticError: Base class for arithmetic errors.
OverflowError: Raised when the result of an arithmetic operation is too large to be expressed.
ZeroDivisionError: Raised when division or modulo operation is performed with zero.
FloatingPointError: Raised when a floating point operation fails (rare in practice).
3. Attribute Errors
AttributeError: Raised when an invalid attribute reference or assignment is made.
4. Buffer Errors
BufferError: Raised when operations related to a buffer fail.
5. EOF Errors
EOFError: Raised when the input() function hits the end-of-file condition (EOF) without reading any input.
6. Import Errors
ImportError: Raised when an import statement fails to find the module definition.
ModuleNotFoundError: Subclass of ImportError, specifically raised when a module could not be found.
7. Lookup Errors
LookupError: Base class for lookup errors.
IndexError: Raised when trying to access an index that is out of range in a list or sequence.
KeyError: Raised when trying to access a dictionary with a key that doesnâ€™t exist.
8. Name Errors
NameError: Raised when a local or global name is not found.
UnboundLocalError: Raised when a local variable is referenced before it has been assigned.
9. OS and File System Errors
OSError: Base class for operating system-related errors, including file system errors.
FileNotFoundError: Raised when trying to open a file that does not exist.
PermissionError: Raised when trying to perform an operation without the necessary permissions.
IsADirectoryError: Raised when a file operation (like writing) is performed on a directory.
NotADirectoryError: Raised when a directory operation is performed on a non-directory object.
FileExistsError: Raised when trying to create a file that already exists.
BlockingIOError: Raised when a non-blocking operation is performed on a resource that would block.
10. Runtime Errors
RuntimeError: Generic error raised for non-specific errors that occur during runtime.
RecursionError: Raised when the maximum recursion depth is exceeded.
11. Type Errors
TypeError: Raised when an operation or function is applied to an object of inappropriate type.
12. Value Errors
ValueError: Raised when a function receives an argument of the correct type but an inappropriate value.
UnicodeError: Raised for Unicode-related encoding or decoding errors.
UnicodeDecodeError: Raised when a Unicode decoding process fails.
UnicodeEncodeError: Raised when a Unicode encoding process fails.
UnicodeTranslateError: Raised when a Unicode translation process fails.
13. Assertion Errors
AssertionError: Raised when an assert statement fails.
14. Key Errors
KeyError: Raised when a dictionary key is not found.
15. Stop Iteration Errors
StopIteration: Raised to signal the end of an iterator's loop.
16. Syntax Errors
SyntaxError: Raised when the parser encounters a syntax error.
IndentationError: Raised when there is incorrect indentation.
TabError: Raised when there are inconsistent tabs and spaces used for indentation.
17. System Errors
SystemError: Raised when an internal error in Python occurs.
SystemExit: Raised when sys.exit() is called to exit the interpreter.
18. Index Errors
IndexError: Raised when an index is out of range.
19. Keyboard Interrupt
KeyboardInterrupt: Raised when the user interrupts program execution (usually by pressing Ctrl+C).
20. Memory Errors
MemoryError: Raised when an operation runs out of memory.
21. Not Implemented Errors
NotImplementedError: Raised when an abstract method that should be implemented in an inherited class is not.
22. Overflow Errors
OverflowError: Raised when an arithmetic operation exceeds the limits for a numeric type.
23. Reference Errors
ReferenceError: Raised when a weak reference proxy is used to access a garbage-collected object.
24. Timeout Errors
TimeoutError: Raised when a system function like select() exceeds the timeout.
25. Type Errors
TypeError: Raised when an operation or function is applied to an object of inappropriate type.
26. Value Errors
ValueError: Raised when a function receives an argument of the correct type but inappropriate value.
27. Warnings (can be raised)
Warning: Base class for warning categories.
DeprecationWarning: Raised for features that are deprecated and will be removed.
FutureWarning: Raised for features that will change in the future.
UserWarning: Raised for user-defined warnings.
Custom Exceptions
You can define your own custom exceptions by creating a class that inherits from the built-in Exception class.

python
Copy code
class MyCustomError(Exception):
    pass

raise MyCustomError("A custom error occurred")
These are the common exceptions that can be used with the raise keyword in Python. Depending on the situation, you can raise any of these exceptions or even define custom exceptions for more specific error handling.

